a:220:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1;}i:3;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:-1;i:1;i:0;i:2;i:1;i:3;s:0:"";}i:2;i:1;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"SCJP : Questions pi√®ges";i:1;i:1;i:2;i:1;}i:2;i:1;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:"What are some potential trips/traps in the SCJP exam?  
";}i:2;i:42;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:98;}i:9;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:98;}i:10;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:98;}i:11;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:98;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" Two top-level public classes cannot be in the same source file.";}i:2;i:104;}i:13;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:168;}i:14;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:168;}i:15;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:168;}i:16;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:168;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" main() cannot call an instance (non-static) method.";}i:2;i:174;}i:18;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:226;}i:19;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:226;}i:20;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:226;}i:21;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:226;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:" Methods can have the same name as the constructor(s).";}i:2;i:232;}i:23;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:286;}i:24;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:286;}i:25;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:286;}i:26;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:286;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" Watch for thread initiation with classes that don't have a run() method.";}i:2;i:292;}i:28;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:365;}i:29;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:365;}i:30;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:365;}i:31;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:365;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" Local classes cannot access non-final variables.";}i:2;i:371;}i:33;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:420;}i:34;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:420;}i:35;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:420;}i:36;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:420;}i:37;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" Case statements must have values within permissible range.";}i:2;i:426;}i:38;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:485;}i:39;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:485;}i:40;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:485;}i:41;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:485;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:" Watch for Math class being an option for immutable classes.";}i:2;i:491;}i:43;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:551;}i:44;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:551;}i:45;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:551;}i:46;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:551;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" instanceOf is not the same as instanceof.";}i:2;i:557;}i:48;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:599;}i:49;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:599;}i:50;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:599;}i:51;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:599;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" Constructors can be private.";}i:2;i:605;}i:53;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:634;}i:54;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:634;}i:55;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:634;}i:56;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:634;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" Assignment statements can be mistaken for a comparison; e.g., if(a=true)";}i:2;i:640;}i:58;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:713;}i:59;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:716;}i:60;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:716;}i:61;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:716;}i:62;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:716;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:" Watch for System.exit() in try-catch-finally blocks.";}i:2;i:722;}i:64;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:775;}i:65;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:775;}i:66;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:775;}i:67;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:775;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:" Watch for uninitialized variable references with no path of proper initialization.";}i:2;i:781;}i:69;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:864;}i:70;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:864;}i:71;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:864;}i:72;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:864;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" Order of try-catch-finally blocks matters.";}i:2;i:870;}i:74;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:913;}i:75;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:913;}i:76;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:913;}i:77;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:913;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" main() can be declared final.";}i:2;i:919;}i:79;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:949;}i:80;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:949;}i:81;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:949;}i:82;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:949;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" -0.0 == 0.0 is true.";}i:2;i:955;}i:84;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:976;}i:85;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:976;}i:86;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:976;}i:87;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:976;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:" A class without abstract methods can still be declared abstract.";}i:2;i:982;}i:89;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1047;}i:90;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1047;}i:91;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:1047;}i:92;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1047;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" Map does not implement Collection.";}i:2;i:1053;}i:94;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1088;}i:95;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1088;}i:96;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:1088;}i:97;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1088;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:" Dictionary is a class, not an interface.";}i:2;i:1094;}i:99;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1135;}i:100;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1135;}i:101;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:1135;}i:102;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1135;}i:103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:" Collection (singular) is an Interface, but Collections (plural) is a helper class.";}i:2;i:1141;}i:104;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1224;}i:105;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1224;}i:106;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:1224;}i:107;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1224;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:" Class declarations can come in any order (e.g., derived first, base next, etc.).";}i:2;i:1230;}i:109;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1311;}i:110;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1311;}i:111;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:1311;}i:112;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1311;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" Forward references to variables gives a compiler error.";}i:2;i:1317;}i:114;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1373;}i:115;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1373;}i:116;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:1373;}i:117;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1373;}i:118;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" Multi-dimensional arrays can be ";}i:2;i:1379;}i:119;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:1412;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"sparse";}i:2;i:1413;}i:121;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:1419;}i:122;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1420;}i:123;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:1421;}i:124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" i.e., if you imagine the array as a matrix, every row need not have the same number of columns.";}i:2;i:1423;}i:125;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1519;}i:126;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1519;}i:127;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:1519;}i:128;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1519;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" Arrays, whether local or class-level, are always initialized";}i:2;i:1525;}i:130;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1586;}i:131;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1586;}i:132;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:1586;}i:133;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1586;}i:134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" Strings are initialized to null, not empty string.";}i:2;i:1592;}i:135;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1643;}i:136;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1643;}i:137;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:1643;}i:138;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1643;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:" An empty string is not the same as a null reference.";}i:2;i:1649;}i:140;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1702;}i:141;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1702;}i:142;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:1702;}i:143;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1702;}i:144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" A declaration cannot be labelled.";}i:2;i:1708;}i:145;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1742;}i:146;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1742;}i:147;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:1742;}i:148;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1742;}i:149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" continue must be in a loop (e.g., for, do, while). It cannot appear in case constructs.";}i:2;i:1748;}i:150;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1836;}i:151;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1836;}i:152;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:1836;}i:153;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1836;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:246:" Primitive array types can never be assigned to each other, even though the primitives themselves can be assigned. For example, ArrayofLongPrimitives = ArrayofIntegerPrimitives gives compiler error even though longvar = intvar is perfectly valid.";}i:2;i:1842;}i:155;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2088;}i:156;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2088;}i:157;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2088;}i:158;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2088;}i:159;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" A constructor can throw any exception.";}i:2;i:2094;}i:160;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2133;}i:161;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2133;}i:162;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2133;}i:163;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2133;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" Initializer blocks are executed in the order of declaration.";}i:2;i:2139;}i:165;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2200;}i:166;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2200;}i:167;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2200;}i:168;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2200;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" Instance initializers are executed only if an object is constructed.";}i:2;i:2206;}i:170;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2275;}i:171;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2275;}i:172;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2275;}i:173;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2275;}i:174;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:" All comparisons involving NaN and a non-NaN always result in false.";}i:2;i:2281;}i:175;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2349;}i:176;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2349;}i:177;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2349;}i:178;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2349;}i:179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" Default type of a numeric literal with a decimal point is double.";}i:2;i:2355;}i:180;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2421;}i:181;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2421;}i:182;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2421;}i:183;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2421;}i:184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:144:" int and long operations / and % can throw an ArithmeticException, while float and double / and % never will (even in case of division by zero).";}i:2;i:2427;}i:185;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2571;}i:186;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2571;}i:187;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2571;}i:188;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2571;}i:189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:" == gives compiler error if the operands are cast-incompatible.";}i:2;i:2577;}i:190;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2640;}i:191;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2640;}i:192;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2640;}i:193;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2640;}i:194;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" You can never cast objects of sibling classes (sharing the same parent).";}i:2;i:2646;}i:195;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2719;}i:196;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2719;}i:197;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2719;}i:198;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2719;}i:199;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" equals() returns false if the object types are different. It does not raise a compiler error.";}i:2;i:2725;}i:200;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2819;}i:201;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2819;}i:202;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2819;}i:203;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2819;}i:204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" No inner class (non-static inner class) can have a static member.";}i:2;i:2825;}i:205;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2891;}i:206;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2891;}i:207;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2891;}i:208;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2891;}i:209;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:" File class has no methods to deal with the contents of the file.";}i:2;i:2897;}i:210;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2962;}i:211;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2962;}i:212;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2962;}i:213;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2962;}i:214;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" InputStream and OutputStream are abstract classes";}i:2;i:2968;}i:215;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3018;}i:216;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3018;}i:217;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:3018;}i:218;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3018;}i:219;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:3018;}}